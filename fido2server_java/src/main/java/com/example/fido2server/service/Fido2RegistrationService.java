package com.example.fido2server.service;

import java.util.Base64;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.example.fido2server.dto.RegistrationResponseData;
import com.yubico.webauthn.FinishRegistrationOptions;
import com.yubico.webauthn.RegistrationResult;
import com.yubico.webauthn.RelyingParty;
import com.yubico.webauthn.StartRegistrationOptions;
import com.yubico.webauthn.data.AttestedCredentialData;
import com.yubico.webauthn.data.AuthenticatorAttestationResponse;
import com.yubico.webauthn.data.ByteArray;
import com.yubico.webauthn.data.ClientRegistrationExtensionOutputs;
import com.yubico.webauthn.data.PublicKeyCredential;
import com.yubico.webauthn.data.PublicKeyCredentialCreationOptions;
import com.yubico.webauthn.data.RelyingPartyIdentity;
import com.yubico.webauthn.data.PublicKeyCredentialDescriptor;
import com.yubico.webauthn.data.PublicKeyCredentialRequestOptions;
import com.yubico.webauthn.data.PublicKeyCredentialParameters;
import com.google.gson.Gson;

// ... other imports
import com.yubico.webauthn.data.UserIdentity;

@Service
public class Fido2RegistrationService {

    private final RelyingParty relyingParty;
    @Autowired
    private final FidoDatabaseCredentialRepository fidoDbCredentialRepository;
    private final RelyingPartyIdentity rpIdentity;

    
    public Fido2RegistrationService(FidoDatabaseCredentialRepository fidoDbCredentialRepository, JdbcTemplate jdbcTemplate) {
        this.fidoDbCredentialRepository = fidoDbCredentialRepository;

        this.rpIdentity = RelyingPartyIdentity.builder()
            .id("localhost")  // Use your domain
            .name("FIDO2 Application")
            .build();

        this.relyingParty = RelyingParty.builder()
            .identity(rpIdentity)
            .credentialRepository(fidoDbCredentialRepository)
            .origins(Collections.singleton("http://localhost:4200"))
            .build();
    }
    
    public PublicKeyCredentialCreationOptions startRegistration(String username) {
    	UserIdentity userIdentity;
        Set<PublicKeyCredentialDescriptor> excludeCredentials;
        Optional<UserIdentity> userIdentityOpt = fidoDbCredentialRepository.findExistingUser(username);

        if (!userIdentityOpt.isPresent()) {
            // User does not exist, generate a new unique userId
            String userId = UUID.randomUUID().toString();
            userIdentity = createNewUserIdentity(username, userId);
            fidoDbCredentialRepository.saveNewUser(userIdentity);
            excludeCredentials = Collections.emptySet(); // No existing credentials to exclude
        } else {
            // User exists, use the existing userIdentity with correct userId
            userIdentity = userIdentityOpt.get();
            excludeCredentials = fidoDbCredentialRepository.getCredentialIdsForUsername(username);
        }

        StartRegistrationOptions startOptions = StartRegistrationOptions.builder()
            .user(userIdentity)
            .build();

        PublicKeyCredentialCreationOptions autoGeneratedOptions = relyingParty.startRegistration(startOptions);

        int timeout = 60000;
        
        String challengeBase64 = autoGeneratedOptions.getChallenge().getBase64Url();
        fidoDbCredentialRepository.updateChallengeForUser(username, challengeBase64);
        
        String rpName = autoGeneratedOptions.getRp().getName();
        String rpId = autoGeneratedOptions.getRp().getId();
        String userDisplayName = autoGeneratedOptions.getUser().getDisplayName();
//        UserIdentity user = autoGeneratedOptions.getUser();
//        System.out.println("checking user" + user);

        
        PublicKeyCredentialCreationOptions publicKeyCredentialCreationOptions  = PublicKeyCredentialCreationOptions.builder()
                .rp(autoGeneratedOptions.getRp())
                .user(autoGeneratedOptions.getUser())
                .challenge(autoGeneratedOptions.getChallenge())
                .pubKeyCredParams(autoGeneratedOptions.getPubKeyCredParams())
                .timeout(timeout) // Use the safely retrieved value
                .attestation(autoGeneratedOptions.getAttestation())
                .extensions(autoGeneratedOptions.getExtensions())
                .excludeCredentials(excludeCredentials) // Use excludeCredentials from earlier
                .build();
        
        String pubKeyCredParamsJson = this.convertPublicKeyCredentialCreationOptionsToJson(publicKeyCredentialCreationOptions);
        fidoDbCredentialRepository.updateRegOptions(rpName, rpId, userDisplayName, pubKeyCredParamsJson, username);
//        System.out.println("checking publicKeyCredentialCreationOptions" + publicKeyCredentialCreationOptions);
//        return PublicKeyCredentialCreationOptions.builder()
//            .rp(autoGeneratedOptions.getRp())
//            .user(autoGeneratedOptions.getUser())
//            .challenge(autoGeneratedOptions.getChallenge())
//            .pubKeyCredParams(autoGeneratedOptions.getPubKeyCredParams())
//            .timeout(timeout) // Use the safely retrieved value
//            .attestation(autoGeneratedOptions.getAttestation())
//            .extensions(autoGeneratedOptions.getExtensions())
//            .excludeCredentials(excludeCredentials) // Use excludeCredentials from earlier
//            .build();
        
        return publicKeyCredentialCreationOptions;
    }
    
    @SuppressWarnings("deprecation")
    public Map<String, String> verifyRegistrationResponse(RegistrationResponseData registrationData) throws Exception {
        String loggedInUser = registrationData.getLoggedInUser();
        PublicKeyCredential<AuthenticatorAttestationResponse, ClientRegistrationExtensionOutputs> credential = registrationData.getCredential();

        // Retrieve the original PublicKeyCredentialCreationOptions
        PublicKeyCredentialCreationOptions originalOptions = fidoDbCredentialRepository.getOriginalRegistrationOptions(loggedInUser);
        
        if (originalOptions == null) {
            throw new Exception("Original registration request not found for user: " + loggedInUser);
        }
        // Prepare FinishRegistrationOptions
        FinishRegistrationOptions options = FinishRegistrationOptions.builder()
            .request(originalOptions)
            .response(credential)
            .build();

        // Verify the registration response
        RegistrationResult result = relyingParty.finishRegistration(options);

        // Check if result is not null and has a keyId
        if (result != null && result.getKeyId() != null) {
        	ByteArray keyId = result.getKeyId().getId();

            // Get clientDataJSON and attestationObject from the credential's response
            ByteArray clientDataJSON = new ByteArray(credential.getResponse().getClientDataJSON().getBytes());
            ByteArray attestationObject = new ByteArray(credential.getResponse().getAttestationObject().getBytes());

            // Handle Optional<Boolean> for discoverable
            boolean isDiscoverable = result.isDiscoverable().orElse(false);

            // Store credential in the database repository
            fidoDbCredentialRepository.storeCredential(
                loggedInUser,
                keyId,
                result.getPublicKeyCose(),
                (int) result.getSignatureCount(), // cast long to int if your database schema expects an int
                isDiscoverable,
                result.isBackupEligible(),
                result.isBackedUp(),
                attestationObject,
                clientDataJSON
            );

            // Prepare success response
            Map<String, String> response = new HashMap<>();
            response.put("success", "true");
            response.put("message", "Registration successful");
            return response;
        } else {
            throw new Exception("Registration failed");
        }
    }
    
    private UserIdentity createNewUserIdentity(String username, String userId) {
        // Convert userId to Base64 to maintain consistency with how it's stored in the database
        byte[] userIdBytes = userId.getBytes();
        ByteArray userIdByteArray = new ByteArray(Base64.getEncoder().encode(userIdBytes));

        return UserIdentity.builder()
            .name(username)
            .displayName("Display Name for " + username) // Set appropriate display name
            .id(userIdByteArray)
            .build();
    }

    
    private String convertPublicKeyCredentialCreationOptionsToJson(PublicKeyCredentialCreationOptions options) {
        Gson gson = new Gson();
        return gson.toJson(options);
    }
}
