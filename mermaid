sequenceDiagram
    participant User as User
    participant Browser as Browser
    participant WebAuthnAPI as WebAuthn API
    participant DSAuth as DSAuth
    participant FIDO2Server as FIDO2 Server (API Gateway)
    participant LambdaAuth as Lambda (Authentication)
    participant LambdaVerify as Lambda (Verify Auth Challenge)
    participant Authenticator as Authenticator

    User->>+Browser: Initiates sign-in
    Browser->>+DSAuth: Sends authentication request
    DSAuth->>DSAuth: Checks user status & authentication mechanism
    alt If FIDO2 Authentication Required
        DSAuth->>FIDO2Server: Routes FIDO2 auth request
        FIDO2Server->>+LambdaAuth: Invokes custom Lambda for auth
        LambdaAuth->>-FIDO2Server: Generates and returns FIDO2 challenge
        FIDO2Server->>DSAuth: Sends FIDO2 challenge
        DSAuth->>Browser: Sends FIDO2 challenge to Browser
        Browser->>WebAuthnAPI: Invokes navigator.credentials.get with challenge
        WebAuthnAPI->>+Authenticator: Prompts user for FIDO2 action
        Authenticator->>-WebAuthnAPI: Generates credentials response (includes signature)
        WebAuthnAPI->>Browser: Returns credentials response
        Browser->>DSAuth: Submits credentials response
        DSAuth->>FIDO2Server: Submits credentials response
        FIDO2Server->>+LambdaVerify: Validates response using public key
        LambdaVerify->>-FIDO2Server: Confirms authentication success
        FIDO2Server->>DSAuth: Sends validation result with Public key
        DSAuth->>DSAuth: Stores public key
        DSAuth->>DSAuth: Proceeds with alternative authentication
        DSAuth->>Browser: Indicates successful FIDO2 auth
    end
    Browser->>User: Displays authentication success message
    Note over DSAuth: Public key & user details managed here


sequenceDiagram
    participant User as User
    participant Browser as Browser
    participant WebAuthnAPI as WebAuthn API
    participant DSAuth as DSAuth
    participant FIDO2Server as FIDO2 Server (API Gateway)
    participant LambdaReg as Lambda (Registration)
    participant Authenticator as Authenticator
    
    User->>+Browser: Initiates registration
    Browser->>+DSAuth: Sends registration request
    DSAuth->>FIDO2Server: Routes registration request
    FIDO2Server->>+LambdaReg: Invokes custom Lambda for registration
    LambdaReg->>Browser: Requests user to complete FIDO2 registration
    Browser->>WebAuthnAPI: Invokes navigator.credentials.create for registration
    WebAuthnAPI->>+Authenticator: User completes FIDO2 registration action
    Authenticator->>WebAuthnAPI: Generates new credentials (public/private key pair)
    WebAuthnAPI->>Browser: Returns new credentials response
    Browser->>FIDO2Server: Submits new credentials response
    FIDO2Server->>+LambdaReg: Processes new credentials, extracts public key
    LambdaReg->>-FIDO2Server: Registration success
    FIDO2Server->>DSAuth: Confirms user registration with public key
    DSAuth->>DSAuth: Stores user and public key details
    DSAuth->>Browser: Indicates successful registration
    Browser->>User: Displays registration success message
    Note over DSAuth: Public key & user details stored here


sequenceDiagram
    participant User as User
    participant Browser as Browser
    participant DSAuth as DSAuth
    participant FIDO2Server as FIDO2 Server (API Gateway)
    participant LambdaRecovery as Lambda (Account Recovery)
    participant EmailService as Email Service

    User->>+Browser: Initiates account recovery
    Browser->>+DSAuth: Requests account recovery
    DSAuth->>+FIDO2Server: Forwards recovery request
    FIDO2Server->>+LambdaRecovery: Invokes Lambda for recovery
    LambdaRecovery->>+EmailService: Sends verification code/email
    EmailService->>-User: User receives verification code/email
    User->>+Browser: Submits verification code
    Browser->>+FIDO2Server: Submits verification code for validation
    FIDO2Server->>+LambdaRecovery: Validates verification code
    LambdaRecovery->>-FIDO2Server: Verification successful
    FIDO2Server->>DSAuth: Informs recovery verification success
    DSAuth->>Browser: Prompts user to set new authentication method
    Browser->>WebAuthnAPI: Invokes navigator.credentials.create for new key pair
    WebAuthnAPI->>+Authenticator: User completes new FIDO2 registration action
    Authenticator->>WebAuthnAPI: Generates new credentials (public/private key pair)
    WebAuthnAPI->>Browser: Returns new credentials response
    Browser->>DSAuth: Submits new credentials response
    DSAuth->>DSAuth: Updates user profile with new public key
    DSAuth->>-Browser: Confirms account recovery success
    Browser->>-User: Displays account recovery success message
    Note over DSAuth: Public key & user details updated here

