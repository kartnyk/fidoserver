sequenceDiagram
    participant User as User
    participant Browser as Browser
    participant WebAuthnAPI as WebAuthn API
    participant DSAuth as DSAuth
    participant FIDO2Server as FIDO2 Server (API Gateway)
    participant LambdaAuth as Lambda (Authentication)
    participant LambdaVerify as Lambda (Verify Auth Challenge)
    participant Authenticator as Authenticator

    User->>+Browser: Initiates sign-in
    Browser->>+DSAuth: Sends authentication request
    DSAuth->>DSAuth: Checks user status & authentication mechanism
    alt If FIDO2 Authentication Required
        DSAuth->>FIDO2Server: Routes FIDO2 auth request
        FIDO2Server->>+LambdaAuth: Invokes custom Lambda for auth
        LambdaAuth->>-FIDO2Server: Generates and returns FIDO2 challenge
        FIDO2Server->>DSAuth: Sends FIDO2 challenge
        DSAuth->>Browser: Sends FIDO2 challenge to Browser
        Browser->>WebAuthnAPI: Invokes navigator.credentials.get with challenge
        WebAuthnAPI->>+Authenticator: Prompts user for FIDO2 action
        Authenticator->>-WebAuthnAPI: Generates credentials response (includes signature)
        WebAuthnAPI->>Browser: Returns credentials response
        Browser->>DSAuth: Submits credentials response
        DSAuth->>FIDO2Server: Submits credentials response
        FIDO2Server->>+LambdaVerify: Validates response using public key
        LambdaVerify->>-FIDO2Server: Confirms authentication success
        FIDO2Server->>DSAuth: Sends validation result with Public key
        DSAuth->>DSAuth: Stores public key
        DSAuth->>DSAuth: Proceeds with alternative authentication
        DSAuth->>Browser: Indicates successful FIDO2 auth
    end
    Browser->>User: Displays authentication success message
    Note over DSAuth: Public key & user details managed here
